@charset "UTF-8";
/*进阶第二章*/
/*第二章：sass的函数简介*/
//在 Sass 中除了可以定义变量，具有 @extend、%placeholder 和 mixins 等特性之外，还自备了一系列的函数功能。其主要包括：
//字符串函数
//数字函数
//列表函数
//颜色函数
//Introspection 函数
//三元函数等
//当然除了自备的函数功能之外，我们还可以根据自己的需求定义函数功能，常常称之为自定义函数。

/*字符串函数-unquote()函数*/
//Sass 的字符串函数主要包括两个函数：
//    unquote($string)：删除字符串中的引号；
//    quote($string)：给字符串添加引号。

//1、unquote()函数
//unquote() 函数主要是用来删除一个字符串中的引号(单引号或者双引号，最外层的)，如果这个字符串没有带有引号，将返回原始的字符串。简单的使用终端来测试这个函数的运行结果：
//注意：从测试的效果中可以看出，unquote( ) 函数只能删除字符串最前和最后的引号（双引号或单引号），而无法删除字符串中间的引号。如果字符没有带引号，返回的将是字符串本身
.test1 {
    content:  unquote('Hello Sass!') ;
}
.test2 {
    content: unquote("'Hello Sass!");
}
.test3 {
    content: unquote("I'm Web Designer");
}
.test4 {
    content: unquote("'Hello Sass!'");
}
.test5 {
    content: unquote('"Hello Sass!"');
}
.test6 {
    content: unquote(Hello Sass);
}







/*字符串函数-quote()函数*/
//quote() 函数刚好与 unquote() 函数功能相反，主要用来给字符串添加引号。如果字符串，自身带有引号会统一换成双引号 ""
.test1 {
    content:  quote('Hello Sass!');
}
.test2 {
    content: quote("Hello Sass!");
}
.test5 {
    //content: quote(hello Sass);  //会报错， 使用 quote() 函数只能给字符串增加双引号，而且字符串中间有单引号或者空格时，需要用单引号或双引号括起，否则编译的时候将会报错。
    //解决方案就是去掉空格，或者加上引号：
}
.test3 {
    content: quote(ImWebDesigner);
}
.test4 {
    content: quote(' ');
}

//同时 quote() 碰到特殊符号，比如： !、?、> 等，除中折号 - 和 下划线_ 都需要使用双引号括起，否则编译器在进行编译的时候同样会报错：
.test5 {
    //content: quote(ImWebDesigner*&*);  //会报错，包含特殊符号 
}





/*字符串函数-To-upper-case()、To-lower-case()*/
//To-upper-case() 函数将字符串小写字母转换成大写字母
.test {
  text: to-upper-case(aaaaa);
  text: to-upper-case(aA-aAAA-aaa); //字符串没有引号号的  不能有特殊的符号  & * % 等，只能包含 - _;
}

//To-lower-case() 函数 与 To-upper-case() 刚好相反，将字符串转换成小写字母：
.test {
  text: to-lower-case(AAAAA);
  text: to-lower-case(aA-aAAA-aaa);
}





/*数字函数简介*/
//Sass 中的数字函数提要针对数字方面提供一系列的函数功能：
//    percentage($value)：将一个不带单位的数转换成百分比值；
//    round($value)：将数值四舍五入，转换成一个最接近的整数；
//    ceil($value)：将大于自己的小数转换成下一位整数；
//    floor($value)：将一个数去除他的小数部分；
//    abs($value)：返回一个数的绝对值；
//    min($numbers…)：找出几个数值之间的最小值；
//    max($numbers…)：找出几个数值之间的最大值；
//    random(): 获取随机数

$value: 0.75;
$numbers: 0.25,0.38,0.75;
.main{
    width: percentage($value);  
    height: round($value);
    padding: floor($value);
    margin: ceil($value);
    line-height: min($numbers...);
    font-weight: max($numbers...);
    font-size: random();
}
//percentage($value)：将一个不带单位的数转换成百分比值；
.footer{
    width : percentage(.2)  //percentage(2px / 10em) 单位不一样，报错
}
//round($value)：将数值四舍五入，转换成一个最接近的整数；
.footer1 {
   width:round(15.8px);
}
.footer2 {
   width:round(3.4em);
}
.footer23 {
   width:round(20%);   //20%
   width:round(2.2%);   //2%
   //width:round(3px / 2em)   //报错，单位不一样
}
//ceil($value)：将大于自己的小数转换成下一位整数；
.footer1 {
   width:ceil(18.1px);  //19px
}
.footer2 {
   width:ceil(2.8em);   //3em
}
//floor($value)：将一个数去除他的小数部分；
.footer1 {

   width:floor(13.5px);  //13px
}

.footer2 {

   width:floor(8.8em);  //8em
}
//abs($value)：返回一个数的绝对值；
.footer {

   width:abs(-8.9px);
}
//min($numbers…)：找出几个数值之间的最小值；
//min(1px,1em)   不过在 min() 函数中同时出现两种不同类型的单位，将会报错误信息：
.div1{
    width: min(6,50,10%,3,300%);
}
.div2{
    width: min(1,2,1%,3,300%);
}
//编译结果，去掉百分号比较前边数值的
//在这个函数里面是没有单位的比较，不会因为有百分号就除以一百，他会取最后一个数字最小的
.div1 {
  width: 3; }
.div2 {
  width: 1%; }
  
//random(): 获取随机数
div{
    width: random();  //每次结果都是不一定的  范围是0 到 1 包括0但不包括1；  获取7-8之间的数     random()+7
//  可以用于验证码的样式~颜色大小等值可以随机变化~  ；；在网页中使用的是编译好的CSS文件，怎么再随机呢？难道每次都要编译scss文件生成随机数吗  ；；     就是，发布到web，是生成的css，这个并非js那样在客户端去进行运算的，感觉基本用不上
}