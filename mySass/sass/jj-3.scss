@charset "UTF-8";
/*进阶第三章*/
/*第三章：列表函数简介*/
//列表函数主要包括一些对列表参数的函数使用，主要包括以下几种：
//    length($list)：返回一个列表的长度值；
//    nth($list, $n)：返回一个列表中指定的某个标签值
//    join($list1, $list2, [$separator])：将两个列给连接在一起，变成一个列表；
//    append($list1, $val, [$separator])：将某个值放在列表的最后；
//    zip($lists…)：将几个列表结合成一个多维的列表；
//    index($list, $value)：返回一个值在列表中的位置值。

//length()函数
// 在命令终端输入sass -i,再在终端输入示例代码
//length(5px 88px (border 66px solid) 4em  (border 8em solid))  //5
$digtal-list1: percentage, round, ceil, floor;   //列表没有用空格 隔开 但是下边也可以，可以是可以 但是不规范
.list-function-style {    
    size: length($digtal-list1);   
} 



/*nth()函数*/
//nth() 函数用来指定列表中某个位置的值。不过在 Sass 中，nth() 函数和其他语言不同，1 是指列表中的第一个标签值，2 是指列给中的第二个标签值
//注：在 nth($list,$n) 函数中的 $n 必须是大于 0 的整数
.box{
    border: nth(border-bottom (4px solid blue) black,2);
}





/*join()函数*/
//join() 函数是将两个列表连接合并成一个列表
//不过 join() 只能将两个列表连接成一个列表，如果直接连接两个以上的列表将会报错：
.box{
    padding: join(10px 20px, 30px 40px);
    color: join((blue red), join((#abc #def),(#dee #eff)));
}
//但很多时候不只碰到两个列表连接成一个列表，这个时候就需要将多个 join() 函数合并在一起使用：
//join((blue red), join((#abc #def),(#dee #eff)))
//join((blue red),((#abc #def),(#dee #eff)))  //编译成：(#0000ff #ff0000 (#aabbcc #ddeeff) (#ddeeee #eeffff))
//在 join() 函数中还有一个很特别的参数 $separator，这个参数主要是用来给列表函数连接列表值是，使用的分隔符号，默认值为 auto。
//join() 函数中 $separator 除了默认值 auto 之外，还有 comma 和 space 两个值，其中 comma 值指定列表中的列表项值之间使用逗号（,）分隔，space 值指定列表中的列表项值之间使用空格（ ）分隔。
//在此建议大家使用 join() 函数合并列表项的时候就明确指定 $separator 参数，用来指定合并的列表中使用什么方式来分隔列表项：

//>> join(blue,red,comma)
//(#0000ff, #ff0000)
//>> join(blue,red,space)
//(#0000ff #ff0000)
//>> join((blue green),(red,orange),comma)
//(#0000ff, #008000, #ff0000, #ffa500)
//>> join((blue green),(red,orange),space)
//(#0000ff #008000 #ff0000 #ffa500)
//>> join((blue, green),(red,orange),comma)
//(#0000ff, #008000, #ff0000, #ffa500)
//>> join((blue, green),(red,orange),space)
//(#0000ff #008000 #ff0000 #ffa500)
//>> join(blue,(red,orange),comma)
//(#0000ff, #ff0000, #ffa500)
//>> join(blue,(red,orange),space)
//(#0000ff #ff0000 #ffa500)
//>> join(blue,(red orange),comma)
//(#0000ff, #ff0000, #ffa500)
//>> join(blue,(red orange),space)
//(#0000ff #ff0000 #ffa500)






/*append()函数*/
//append() 函数是用来将某个值插入到列表中，并且处于最末位。
//>> append(10px 20px ,30px)
//(10px 20px 30px)
//>> append((10px,20px),30px)   
//(10px, 20px, 30px)    //编译  1 ，上边两个写法不一样结果一样
//>> append(green,red)
//(#008000 #ff0000)
//>> append(red,(green,blue))   
//(#ff0000 (#008000, #0000ff))   //编译  2区别上边1出  内容带不带括号






/*zip()函数*/
//zip()函数将多个列表值转成一个多维的列表：
//>> zip(1px 2px 3px,solid dashed dotted,green blue red)
//((1px "solid" #008000), (2px "dashed" #0000ff), (3px "dotted" #ff0000))

//在使用zip()函数时，每个单一的列表个数值必须是相同的：
//zip(1px 2px 3px, solid , green blue red)   //报错， 单一的列表个数中间呢个是一个 不相同，应该是3个





/*index()函数*/
//index() 函数类似于索引一样，主要让你找到某个值在列表中所处的位置。在 Sass 中，第一个值就是1，第二个值就是 2，依此类推：
//>> index(1px solid red, 1px)
//1
//>> index(1px solid red, solid)
//2
//>> index(1px solid red, red)
//3
//在 index() 函数中，如果指定的值不在列表中（没有找到相应的值），那么返回的值将是 false或者null，相反就会返回对应的值在列表中所处的位置。
//>> index(1px solid red,dotted) //列表中没有找到 dotted
//false或者null
//>> index(1px solid red,solid) //列表中找到 solid 值，并且返回他的位置值 2
//2






/*Introspection函数         Introspection:自我检查*/  
//Introspection 函数包括了几个判断型函数：
//type-of($value)：返回一个值的类型
//unit($number)：返回一个值的单位
//unitless($number)：判断一个值是否带有单位
//comparable($number-1, $number-2)：判断两个值是否可以做加、减和合并

/*函数 -type-of()*/
//type-of() 函数主要用来判断一个值是属于什么类型：
//返回值：
//number 为数值型。
//string 为字符串型。
//bool 为布尔型。
//color 为颜色型。
//>> type-of(100)
//"number"
//>> type-of(100px)
//"number"
//>> type-of("asdf")
//"string"
//>> type-of(asdf)
//"string"
//>> type-of(true)
//"bool"
//>> type-of(false)
//"bool"
//>> type-of(#fff)
//"color"
//>> type-of(blue)
//"color"
//>> type-of(1 / 2 = 1)
//"string"    //string 原因 ：我觉得是因为在sass中并没有赋值(=)的语法，这个就被当作是没有加引号的字符串了
//>> type-of(1 / 2)
//"number"







/*unit()函数*/
//unit() 函数主要是用来获取一个值所使用的单位，碰到复杂的计算时，其能根据运算得到一个“多单位组合”的值，不过只充许乘、除运算：
//>> unit(100)
//""
//>> unit(100px)
//"px"
//>> unit(20%)
//"%"
//>> unit(1em)
//"em"
//>> unit(10px * 3em)
//"em*px"
//>> unit(10px / 3em)
//"px/em"
//>> unit(10px * 2em / 3cm / 1rem)
//"em/rem"

//但加、减碰到不同单位时，unit() 函数将会报错，除 px 与 cm、mm 运算之外：
//>> unit(1px + 1cm)
//"px"
//>> unit(1px - 1cm)
//"px"
//>> unit(1px + 1mm)
//"px"
//>> unit(10px * 2em - 3cm / 1rem)
//SyntaxError: Incompatible units: 'cm' and 'px*em'.
//>> unit(10px * 2em - 1px / 1rem)
//SyntaxError: Incompatible units: '' and 'em'.
//>> unit(1px - 1em)
//SyntaxError: Incompatible units: 'em' and 'px'.
//>> unit(1px - 1rem)
//SyntaxError: Incompatible units: 'rem' and 'px'.
//>> unit(1px - 1%)
//SyntaxError: Incompatible units: '%' and 'px'.
//>> unit(1cm + 1em)
//SyntaxError: Incompatible units: 'em' and 'cm'.

//unit() 函数对于单位运算相对来说也没有规律，而且有些单位也无法整合成一个单位，对于我们在 CSS 中运用中并不适合，比如
//>> unit(10px * 3em)
//"em*px"
//>> unit(10px / 3em)
//"px/em"
//>> unit(10px * 2em / 3cm / 1rem)
//"em/rem"   -- 计算结果不知道怎么出来的

//换句话说，上面运算出来的单位，对于在 CSS 中使用将是没有任何意义的。







/*unitless()函数*/
//unitless() 函数相对来说简单明了些，只是用来判断一个值是否带有单位，如果不带单位返回的值为 true，带单位返回的值为 false：
//>> unitless(100)
//true
//>> unitless(100px)
//false
//>> unitless(100em)
//false
//>> unitless(100%)
//false
//>> unitless(1 /2 )
//true
//>> unitless(1 /2 + 2 )
//true
//>> unitless(1px /2 + 2 )
//false

//代码实现：用户在调用混合宏时，如果用户没有给参数值加上单位，程序会自动加入单位。
@mixin adjust-location($x, $y) {
  @if unitless($x) {    
    $x: 1px * $x;
  }
  @if unitless($y) {    
    $y: 1px * $y;
  }
  position: relative; 
  left: $x; 
  top: $y;
}

.botton{
    @include adjust-location(20px, 30);
}






/*comparable()函数*/
//comparable() 函数主要是用来判断两个数是否可以进行“加，减”以及“合并”。如果可以返回的值为 true，如果不可以返回的值是 false：
//px  mm cm 能够计算
//>>comparable(2px,1px)
//true
//>> comparable(2px,1%)
//false
//>> comparable(2px,1em)
//false
//>> comparable(2rem,1em)
//false
//>> comparable(2px,1cm)
//true
//>> comparable(2px,1mm)  //不明白，单位不一样为什么能计算   px mm如何计算
//true
//>> comparable(2px,1rem)
//false
//>> comparable(2cm,1mm)
//true






/*Miscellaneous函数*/
//在这里把 Miscellaneous 函数称为三元条件函数，主要因为他和 JavaScript 中的三元判断非常的相似。他有两个值，当条件成立返回一种值，当条件不成立时返回另一种值
//if($condition,$if-true,$if-false)
//>> if(true,1px,2px)
//1px
//>> if(false,1px,2px)
//2px

//应用场景
@mixin switch($option){
width:if($option,8em,20em)
}
 
.box2{
@include switch(false);
}
 
.box2{
@include switch(true);
}






/*Map*/
//Sass 的 map 常常被称为数据地图，也有人称其为数组，因为他总是以 key:value 成对的出现，但其更像是一个 JSON 数据。

//首先有一个类似于 Sass 的变量一样，用个 $ 加上命名空间来声明 map。后面紧接是一个小括号 ()，将数据以 key:value 的形式赋予，其中 key 和 value 是成对出现，并且每对之间使用逗号 (,) 分隔，其中最后一组后面没有逗号。
//其中键 key 是用来查找相关联的值 value。使用 map 可以很容易收集键的值和动态插入
$color: (
    default: #fff,
    primary: #22ae39,
    negative: #d9534f
);

//对于 Sass 的 map，还可以让 map 嵌套 map。其实就是 map 的某一个 key 当成 map，里面可以继续放一对或者多对 key:value
$map: (
    key1: value1,
    key2: (
        key-1: value-1,
        key-2: value-2,
    ),
    key3: value3
);

//map 的嵌套实用性也非常的强，大家可能有碰到过换皮肤的项目，可能每一套皮肤对应的颜色蛮多的，那么使用此功能来管理颜色的变量就非常的有条理性，便于维护与管理
$theme-color: (
    default: (
        bgcolor: #fff,
        text-color: #444,
        link-color: #39f
    ),
    primary:(
        bgcolor: #000,
        text-color:#fff,
        link-color: #93f
    ),
    negative: (
        bgcolor: #f36,
        text-color: #fefefe,
        link-color: #d4e
    )
);

//在一些介绍 map 的老教程中，你会看到这样的方式声明 map:
$map: (
    key1 value1,
    key2 value2,
    key3 value3
);

//或者：
$map:(
    key1 value1,
    key2 value2,
    key3 (
        key-1 value-1,
        key-2 value-2
    ),
    key4 value4
);
//虽然也能编译出 CSS，但建议不这样使用。






/*Sass Maps的函数 */
//前面介绍了使用 map 来管理变量，但要在 Sass 中获取变量，或者对 map 做更多有意义的操作，我们必须借助于 map 的函数功能。在 Sass 中 map 自身带了七个函数：
//map-get($map,$key)：根据给定的 key 值，返回 map 中相关的值。
//map-merge($map1,$map2)：将两个 map 合并成一个新的 map。
//map-remove($map,$key)：从 map 中删除一个 key，返回一个新 map。
//map-keys($map)：返回 map 中所有的 key。
//map-values($map)：返回 map 中所有的 value。
//map-has-key($map,$key)：根据给定的 key 值判断 map 是否有对应的 value 值，如果有返回 true，否则返回 false。
//keywords($args)：返回一个函数的参数，这个参数可以动态的设置 key 和 value。

$map:(
    key1:red,
    key2:black,
    key3:yellow
);

$map1:(
    key4:1,
    key5:2,
    key6:3
);

@debug  map-get($map,key1);
@debug  map-merge($map,$map1);  
@debug  map-remove($map,key1);
@debug  map-keys($map);
@debug  map-values($map);
@debug  map-has-key($map,key);
@mixin maps($args...){
    @debug  keywords($args);    
};
@include maps(
    $color1:red,
    $color2:yellow2,
    $color3:yello3
);





/*Sass Maps的函数-map-get($map,$key)*/
//map-get($map,$key) 函数的作用是根据 $key 参数，返回 $key 在 $map 中对应的 value 值。如果 $key 不存在 $map中，将返回 null 值。此函数包括两个参数：
$social-colors: (
    dribble: #ea4c89,
    facebook: #3b5998,
    github: #171515,
    google: #db4437,
    twitter: #55acee
);

.btn-dribble{
  color: map-get($social-colors,facebook);
}

//我们来看另一种情况，假设 $social-colors 这个 map 没有 $weibo 这个 key:
.btn-weibo{
  font-size: 12px;
  color: map-get($social-colors,weibo);
}
//此时编译出来的是CSS：
.btn-weibo {
  font-size: 12px;
}

//提取二维数组中map值
$theme-color: (
    default: (
        bgcolor: #fff,
        text-color: #444,
        link-color: #39f
    ),
    primary:(
        bgcolor: #000,
        text-color:#fff,
        link-color: #93f
    ),
    negative: (
        bgcolor: #f36,
        text-color: #fefefe,
        link-color: #d4e
    )
);

.btn-c{
    @debug map-get($theme-color,default);
    //@debug map-get($theme-color,default,bgcolor); 错误写法
    @debug map-get(map-get($theme-color,default), bgcolor);
    color: map-get(map-get($theme-color,default), text-color);
}






/*Sass Maps的函数-map-has-key($map,$key)*/
//map-has-key($map,$key) 函数将返回一个布尔值。当 $map 中有这个 $key，则函数返回 true，否则返回 false。
//前面的示例，当 $key 不在 $map 中时，使用 map-get($map,$key) 函数将返回一个 null 值。但对于开发人员，并看不到任何提示信息。如果使用 map-has-key($map,$key) 函数就可以改变这一状态。我们来看一个简单的示例。

@if map-has-key($social-colors,facebook){
    .btn-facebook {
        color: map-get($social-colors,facebook);
    }
} @else {
    @warn "No color found for facebook in $social-colors map. Property committed."
}

//每次想上边一样写通用的代码传递不同的参数，是不是不太友好。总觉得这样写是傻傻的，总不可能每获取一个 key 都写一个 @if 语句吧。其实不用这么复杂，我们可以自定义一个函数，比如 colors():
$social-colors: (  //maps 可以使用@each遍历
    dribble: #ea4c89,
    facebook: #3b5998,
    github: #171515,
    google: #db4437,
    twitter: #55acee
);
@function colors($color){  //@function  定义函数
    @if not map-has-key($social-colors,$color){  //@if not
        @warn "No color found for `#{$color}` in $social-colors map. Property comitted.";   //@warm @debug 
    }
    @return map-get($social-colors,$color);
}
/*no each*/
.btn-dribble {
    color: colors(dribble);
}
.btn-facebook {
    color: colors(facebook);
}
.btn-github {
    color: colors(github);
}
.btn-google {
    color: colors(google);
}
.btn-twitter {
    color: colors(twitter);
}
.btn-weibo {
    color: colors(weibo);
}

//当然，如果你对 Sass 的指令熟悉的话，上面编译出来的 CSS 可以使用 @each：
/*each*/
@each $social-network,$social-color in $social-colors {  //$social-color就是$social-colors值列表里面的值，$social-network是$social-colors值列表里面的键，
    .btn-#{$social-network} {
        color: colors($social-network);
    }
}






/*Sass Maps的函数-map-keys($map)*/
//map-keys($map) 函数将会返回 $map 中的所有 key。这些值赋予给一个变量，那他就是一个列表。如
//map-keys($social-colors);  
//$list: map-keys($social-colors); //$list:"dribble","facebook","github","google","twitter";

@function colors($color){
    $names: map-keys($social-colors);
    @if not index($names,$color){
        @warn "Waring: `#{$color} is not a valid color name.`";
    }
    @return map-get($social-colors,$color);
}
//上面代码中最不同之处，我们使 用map-key s将 $social-colors 这个 map 的所有 key 取出，并赋予给一个名 为 $names 的列表。然后通过 index($names,$color) 返回 $color 在 $names 位置，如果这个位置不存在，将返回提示信息，如果存在将返回正确的值
.btn-weibo{
    color: colors(weibo);
}

//同样，也可以通过 @each 或者 @for 遍历出所有值：
@each $name in map-keys($social-colors){
    .btn-#{$name}{
        color: colors($name);
    }
};

//@for:
@for $i from 1 through length(map-keys($social-colors)){
    .btn-#{nth(map-keys($social-colors),$i)} {
        color: colors(nth(map-keys($social-colors),$i));
    }
};







/*Sass Maps的函数-map-values($map)、map-merge($map1,$map2)*/
//map-values($map) 函数类似于 map-keys($map) 功能，不同的是 map-values($map )获取的是 $map 的所有 value 值，可以说也将是一个列表。而且，map-values($map) 中如果有相同的 value 也将会全部获取出来。
//map-values($social-colors)
//将会返回：
//#ea4c89,#3b5998,#171515,#db4437,#55acee
$color: (
    text: #f36,
    link: #f63,
    border: #ddd,
    backround: #fff
);
$typo:(
    font-size: 12px,
    line-height: 1.6
);
$newmap: map-merge($color,$typo);
@debug $newmap;
@debug map-values($color);






/*map-merge($map1,$map2)*/
//map-merge($map1,$map2) 函数是将 $map1 和 $map2 合并，然后得到一个新的 $map。如果你要快速将新的值插入到 $map 中的话，这种方法是最佳方法。假设我们有两个 $map:
$color2:(
    text: #f36,
    link: #f63,
    border: #ddd,
    backround: #fff
);
$typo2:(
    font-size: 12px,
    line-height: 1.6
);
$newmap2: map-merge($color2,$typo2);
@debug $newmap2;
@debug map-values($color2);

//不过有一点需要注意，如果 $map1 和 $map2 中有相同的 $key 名，那么将 $map2 中的 $key 会取代 $map1 中的：


//单独在慕课网编辑窗口里边是没有错的，但是放到这里有问题 error
$color2:(
    text: #f36,
    link: #f63,
    border: #ddd,
    backround: #fff
);
$typo2:(
    font-size: 12px,
    line-height: 1.6
);
$newmap2: map-merge($color2,$typo2);
@debug $newmap2;
body{
    @each $Prop,$val in $newmap2{
       #{$Prop}: #{$val};
     }
}
@debug map-values($color2);






/*Sass Maps的函数-map-remove($map,$key)、keywords($args)*/
//map-remove($map,$key)
//map-remove($map,$key) 函数是用来删除当前 $map 中的某一个 $key，从而得到一个新的 map。其返回的值还是一个 map。他并不能直接从一个 map 中删除另一个 map，仅能通过删除 map 中的某个 key 得到新 map。如：
//$map:map-remove($social-colors,dribble);
$social-colors-s: (
    facebook: #3b5998,
    github: #171515,
    google: #db4437,
    twitter: #55acee
);
@debug map-remove($social-colors-s,facebook);






/*keywords($args)*/
//keywords($args) 函数可以说是一个动态创建 map 的函数。可以通过混合宏或函数的参数变创建 map。参数也是成对出现，其中 $args 变成 key(会自动去掉$符号)，而 $args 对应的值就是value。
@mixin map($args...){
    @debug keywords($args);
}
@include map(
  $dribble: #ea4c89,
  $facebook: #3b5998,
  $github: #171515,
  $google: #db4437,
  $twitter: #55acee
)